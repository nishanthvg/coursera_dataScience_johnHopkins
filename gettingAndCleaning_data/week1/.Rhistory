as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
example <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i)
c
attributes(d) ## gives all the methods used on matrix and its value
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
example <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix - are filled col wise - can be seen in the examples 2
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
##vector to matrix
f <- 1:8
dim(f) <- c(4,4)
print(f)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix - are filled col wise - can be seen in the examples 2
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
##vector to matrix
f <- 1:8
dim(f) <- c(2,4)
print(f)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix - are filled col wise - can be seen in the examples 2
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
##vector to matrix
f <- 1:8
dim(f) <- c(2,4)
print(f)
##column and row binding
g <- 1:3
h <- 4:7
cbind(g,h)
rbind(g,h)
h <- 4:6
View(f)
rbind(g,h)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix - are filled col wise - can be seen in the examples 2
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
##vector to matrix
f <- 1:8
dim(f) <- c(2,4)
print(f)
##column and row binding
g <- 1:3
h <- 4:6
cbind(g,h)
rbind(g,h)
##factors - catagorial array that is character array which can be used for ordered and unordered list
i <- factor(c("yes","yes","no","no"))
print(i)
table(i)
unclass(i)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix - are filled col wise - can be seen in the examples 2
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
##vector to matrix
f <- 1:8
dim(f) <- c(2,4)
print(f)
##column and row binding
g <- 1:3
h <- 4:6
cbind(g,h)
rbind(g,h)
##factors - catagorial array that is character array which can be used for ordered and unordered list
i <- factor(c("yes","yes","no","no"))
print(i)
table(i)
unclass(i)
##levels can be set for explicitly mentioning the order - compare it with the above
j <- factor(c("yes","yes","no","no"), levels = c("yes", "no"))
print(j)
x <- c("1","2") ##any data type can be implemented, the c function will automatically detect it
y <- vector("numeric", length = 10) ## default intialisation
##if in c function, elements are of not same type, then it chooses any one of the type
z <- c(1, "a")
## explicit typecasting or also called as coersion
a <- 1.3
class(a)
as.character(a)
##sequence of number
b <- 0:7
class(b)
as.logical(b)
##list - element in the list can contain multiple  data type
c = list(1, "!", TRUE, 1+0i) ## [[]] -> are the index
##matrix - are filled col wise - can be seen in the examples 2
d <- matrix(nrow = 2, ncol = 2)
print(d)
dim(d) ##gives dimension that is size of row and col
attributes(d) ## gives all the methods used on matrix and its value
ex1 <- matrix(c(1,2,3,4,5,6,7,8), nrow = 4, ncol = 2) ##example
ex2 <- matrix(1:8, nrow = 4, ncol = 4)
print(ex2)
##vector to matrix
f <- 1:8
dim(f) <- c(2,4)
print(f)
##column and row binding
g <- 1:3
h <- 4:6
cbind(g,h)
rbind(g,h)
##factors - catagorial array that is character array which can be used for ordered and unordered list
i <- factor(c("yes","yes","no","no"))
print(i)
table(i)
unclass(i)
##levels can be set for explicitly mentioning the order - compare it with the above
j <- factor(c("yes","yes","no","no"), levels = c("yes", "no"))
print(j)
##MIssing values na and nan - all nan are na but all na are not nan
k <- c(1,2,3,NA,NaN)
is.na(k)
is.nan(k)
##if else statement
x=2
x
##if else statement
x=2
if(x > 2) {
y = 3
} else {
y =4
}
print(y)
y <- if(x > 3) {
3
} else {
4
}
print(y)
a = c("a","b","c")
seq_along(a)
##if else statement
x=2
if(x > 2) {
y = 3
} else {
y =4
}
print(y)
y <- if(x > 3) {
3
} else {
4
}
print(y)
## for loop
a = c("a","b","c")
for(i in 1:3) {
print(a[i])
}
for(i in seq_along(a)) {
print(a[i])
}
for(letter in a) {
print(letter)
}
for(i in 1:3) print(a[i])
##nested loop
b = matrix(1:6,2,3)
for(i in seq_along(nrow(b))) {
for(j in seq_along(ncol(b))) {
print(b[i][j])
}
}
print(b[i,j])
b = matrix(1:6,2,3)
for(i in seq_along(nrow(b))) {
for(j in seq_along(ncol(b))) {
print(b[i,j])
}
}
b = matrix(1:6,2,3)
for(i in seq_len(nrow(b))) {
for(j in seq_len(ncol(b))) {
print(b[i,j])
}
}
##while loop
c = 0
while(count < 2) {
print(count)
count++
}
c = 0
while(count < 2) {
print(count)
count <- count + 1
}
count = count + 1
##while loop
count = 0
##while loop
count = 0
while(count < 2) {
print(count)
count = count + 1
}
x = 0
repeat {
if(x > 2) {
break
}
x = x +1
}
print(x)
##next - used to skip an iteration
for(i in 1:30) {
if(i <= 20){
next
}
print(i)
}
m <- numeric(10)
print(m)
class(m)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
0
#lapply - returns a list
#arguments - list, function
x <- 1:4
lapply(x, mean)
lapply(x, function(ele) ele = ele +1)
lapply(x, function(ele) ele = ele +1, min = 0, max = 5)
lapply(x, runif, min = 0, max = 9) #creates a uniform random variables - runif
rnorm(10)
rnorm(10,1)
x1 <- list(a = 1:4, b = rnorm(10), c = rnorm(20)
sapply(x1, mean)
x1 <- list(a = 1:4, b = rnorm(10), c = rnorm(20))
sapply(x1, mean)
20, 10)
colSum = apply(x2, 2, sum)
rowSum = apply(x2, 1, sum)
colMean = apply(x2, 2, mean)
colSum = apply(x2,1,mean)
x2 <- matrix(rnorm(200), 20, 10)
colSum = apply(x2, 2, sum)
rowSum = apply(x2, 1, sum)
colMean = apply(x2, 2, mean)
colSum = apply(x2,1,mean)
colSum
culMean
x2 <- matrix(rnorm(200), 20, 10)
colSum = apply(x2,1, sum)
rowSum = apply(x2, 2, sum)
colMean = apply(x2, 1, mean)
rowSum = apply(x2,2,mean)
colSum
x2 <- matrix(rnorm(200), 20, 10)
colSum = apply(x2,2, sum)
rowSum = apply(x2, 1, sum)
colMean = apply(x2, 2, mean)
rowMean = apply(x2,1,mean)
colSum
rowSum
#ANOTHER EXAMPLE
apply(x2,1,quantile,probs = c(0.25,0.75)) #finding the 25 and the 75th percentiel forevery row
#mapply - helps in itrating through the arguments
noise <- function(n, mean, sd) {
rnorm(n,mean,sd)
}
#say we have an array of n and array of mean for which we need norm
mapply(noise, 1:5,1:5,2)
x <- list(rnorm(10), runif(10, rnorm(10))
f <- gl(3,10)
tapply(x,f,mean)
x4 <- list(rnorm(10), runif(10, rnorm(10))
f1 <- gl(3,10)
tapply(x,f,mean)
x4 <- list(rnorm(10), runif(10), rnorm(10))
f1 <- gl(3,10)
tapply(x,f,mean)
#tapply
x4 <- c(rnorm(10), runif(10), rnorm(10))
f1 <- gl(3,10)
tapply(x,f,mean)
#tapply
x4 <- c(rnorm(10), runif(10), rnorm(10,1))
f1 <- gl(3,10)
tapply(x,f,mean)
f1
x4
length(f1)
length(x4)
#tapply
x4 <- c(rnorm(10), runif(10), rnorm(10,1))
f1 <- gl(3,10)
tapply(x4,f1,mean)
tapply(x4,f1,mean)
tapply(x4, f1, mean, simplify = FALSE)
filePath <- "http//:w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(filePath, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
filePath <- "http//:w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(filePath, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
#XML
library(XML)
#JSON
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/reepos")
url <- "https://api.github.com/users/jtleek/reepos"
jsonData <- fromJSON(url)
url <- "https://api.github.com/users/hadley/orgs"
jsonData <- fromJSON(url)
names(jasonData)
names(jsonData)
names(jsonData$url)
names(jsonData$id)
head(jsonData)
head(jsonData[1])
iris
#to json
tojson <- toJSON(iris, pretty=TRUE)
TOJSON
toJSON
cat(tojson)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "./data/quizQ1", method="curl")
data <- read.csv("./data/quizQ1")
head(data)
list.files("./data")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "./data/quizQ1.csv", method="curl")
download.file(url, destfile = "./data/business.csv", method ="curl")
path <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(path, destfile = "./data/quizQ1.csv", method="curl")
setwd("~/Documents/Education/coursera_data_scince/gettingAndCleaning_data/week1")
download.file(path, destfile = "quizQ1.csv", method="curl")
list.files()
data <- read.csv("quizQ1.csv")
head(data)
data$properties
data[,properties]
data
names(data)
data[,VAL]
data$VAL
nrows(data[VAL == 24, ])
data[VAL == 2, ]
data[VAL == 24, ]
data[VAL,]
data[,VAL]
data[,"VAL"]
data["VAL", ]
data["VAL"]
data["VAL" == 24]
library(xlsx)
