x4
length(f1)
length(x4)
#tapply
x4 <- c(rnorm(10), runif(10), rnorm(10,1))
f1 <- gl(3,10)
tapply(x4,f1,mean)
tapply(x4,f1,mean)
tapply(x4, f1, mean, simplify = FALSE)
setwd("~/Documents/Education/coursera_data_scince/R_prog/week3")
ls
head(outcome)
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11]
ncol(11)
ncol(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
best <- function(state, outcome) {
#read the outcome data
outcome = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2,7,11,23)]
names(data)[1] <- "names"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data["states"]
states <- unique(states)
if(states %in% state == FALSE) {
stop("Invalid state given")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("lasvegas", "heart failure")
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2,7,11,23)]
names(data)[1] <- "names"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data["states"]
states <- unique(states)
if(states %in% state == FALSE) {
stop("Invalid state given")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("losangeles", "heart failure")
best("TX", "heart attack")
names(data)[2] <- "state"
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2,7,11,23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data["states"]
states <- unique(states)
if(states %in% state == FALSE) {
stop("Invalid state given")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
## Write a function called best that take two arguments: the 2-character abbreviated name of a state and an
## outcome name.
## The function reads the outcome-of-care-measures.csv file and returns a character vector
## with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specified outcome
## in that state. The hospital name is the name provided in the Hospital.Name variable. The outcomes can
## be one of “heart attack”, “heart failure”, or “pneumonia”. Hospitals that do not have data on a particular
## outcome should be excluded from the set of hospitals when deciding the rankings.
## Handling ties. If there is a tie for the best hospital for a given outcome, then the hospital names should
## be sorted in alphabetical order and the first hospital in that set should be chosen (i.e. if hospitals “b”, “c”,
## and “f” are tied for best, then hospital “b” should be returned).
## The function should use the following template.
best <- function(state, outcome) {
## All of the possible outcome strings
outcomes = c("heart attack", "heart failure", "pneumonia")
## Check if outcome is one of the strings in outcomes
## %in% is a more intuitive interface as a binary operator, which returns a logical vector indicating if there is a match or not
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Get the columns below from 'data' and place it in 'data' with new names ("name", "state", "heart attack", etc)
#"Hospital.Name"
#"State"
#"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
#"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
#"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Get a vector of all of the states in 'data' now at column 2, NOTE: could've also used data["state"]
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
## Get only the rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
## RowNum = the index of the minimum value
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best("TX", "heart attack")
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2,7,11,23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[,2]
states <- unique(states)
if(states %in% state == FALSE) {
stop("Invalid state given")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[,2]
states <- unique(states)
if(states %in% state == FALSE) {
stop("Invalid state given")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data["state"]
states <- unique(states)
if(states %in% state == FALSE) {
stop("Invalid state given")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
stop("invalid state")
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[, 2]
states <- unique(states)
if( states %in% state == FALSE ) {
stop("invalid state")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
best
best("TX", "heart attack")
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
best("TX", "heart attack")
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
rankhospital <- function(state, outcome, num) {
## Read outcome data .csv file
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## All of the possible outcome strings
outcomes = c("heart attack", "heart failure", "pneumonia")
## Check if outcome is one of the strings in outcomes
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Validate the state string
## All of the possible states from the data
states <- data[, 2]
states <- unique(states)
## Check if state is one of the states in the data
if( state %in% states == FALSE ) {
stop("invalid state")
}
## Validate the num value by checking if it is "best","worst", or a number.
## NOTE: If num was Boolean then num%%1 = 0
if( num != "best" && num != "worst" && num%%1 != 0 ) {
stop("invalid num")
}
## Get only the rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
## Order the data by name and then outcome
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Process the num argument to get the row index
vals <- data[, outcome]
if( num == "best" ) {
rowNum <- which.min(vals)
} else if( num == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- num
}
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcomes)
outcomes[,11] <- as.numeric(outcomes[,11])
hist(outcomes[,11])
best <- function(state, outcome) {
#read the outcome data
outcomes = c("heart attack", "heart failure", "pneumonia")
if(outcome %in% outcomes == FALSE) {
stop("Invalid outcome")
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
val <- data[,outcome]
rowNum <- which.min(val)
data[rowNum, ]$name
}
rankhospital <- function(state, outcome, num) {
## Read outcome data .csv file
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## All of the possible outcome strings
outcomes = c("heart attack", "heart failure", "pneumonia")
## Check if outcome is one of the strings in outcomes
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Validate the state string
## All of the possible states from the data
states <- data[, 2]
states <- unique(states)
## Check if state is one of the states in the data
if( state %in% states == FALSE ) {
stop("invalid state")
}
## Validate the num value by checking if it is "best","worst", or a number.
## NOTE: If num was Boolean then num%%1 = 0
if( num != "best" && num != "worst" && num%%1 != 0 ) {
stop("invalid num")
}
## Get only the rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
## Order the data by name and then outcome
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Process the num argument to get the row index
vals <- data[, outcome]
if( num == "best" ) {
rowNum <- which.min(vals)
} else if( num == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- num
}
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
